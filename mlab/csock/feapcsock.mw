$ #include "matsock.h"
$ #include <stdlib.h>

% @T -----------------------------------
% \section{Interface to the C socket helper}
%
% The C socket library provides a MEX interface to both TCP and
% UNIX domain sockets.  This library can be used with MATLAB as an
% alternative to the Java socket library; or it can be used with
% recent versions of Octave. 
% 
% The C socket routines are identical to the Java socket routines,
% save for [[sock_new]]:
% \begin{itemize}
% \item [[sock_new(hostname,port)]] - start a TCP socket connection
% \item [[sock_new(sockname)]] - start a UNIX socket connection
% \end{itemize}
%
% In addition, we provide a routine that queries the environment to
% figure out an appropriate name for a UNIX-domain socket to the server:
% \begin{itemize}
% \item [[sock_default_unix]] - return the default UNIX socket name
% \end{itemize}
%@q

@ sock_new.m --------------------------------------------------------------
function fd = sock_new(hostname,port)

if nargin == 2
  # int fd = matsock_new_tcp(cstring hostname, int port);
elseif nargin == 1
  # int fd = matsock_new_unix(cstring hostname);
else
  error('Incorrect number of arguments to sock_new');
end

@ sock_close.m ------------------------------------------------------------
function sock_close(fd)
# matsock_close(int fd);

@ sock_recv.m -------------------------------------------------------------
function s = sock_recv(fd)
# matsock_recv(int fd, output cstring[1024] s, int 1024);

@ sock_send.m -------------------------------------------------------------
function sock_send(fd, s)
# matsock_send(int fd, cstring s);

@ sock_recvdarray.m -------------------------------------------------------
function val = sock_recvdarray(fd, len)
# matsock_recvdarray(int fd, output double[len] val, int len);

@ sock_recviarray.m -------------------------------------------------------
function val = sock_recviarray(fd, len)
# matsock_recviarray(int fd, output int[len] val, int len);

@ sock_senddarray.m -------------------------------------------------------
function sock_senddarray(fd, x)
len = prod(size(x));
# matsock_senddarray(int fd, double[] x, int len);

@ sock_sendiarray.m -------------------------------------------------------
function sock_sendiarray(fd, x)
len = prod(size(x));
# matsock_sendiarray(int fd, int[] x, int len);

@ sock_default_unix.m -----------------------------------------------------
function s = sock_default_unix
usrvar = 'USER';
# cstring usrenv = getenv(cstring usrvar);
s = ['/tmp/feaps-', usrenv];
